#include <ServoTimer2.h>
#include <L298N.h>
#include <NewPing.h>
#include <NewTone.h>

//Varikliu (Pin)
#define ENA 13
#define IN1 8
#define IN2 7
#define ENB 4
#define IN3 5
#define IN4 2

//Utrasonic (pin)
#define TRIGGER_PIN 9
#define ECHO_PIN1 3
#define ECHO_PIN2 6
#define ECHO_PIN3 12
#define MAX_DISTANCE 300

//Ledai ir signalas (pin) ir migtukas
#define LED_G A1 //zalio ledo prijungimas; 
#define LED_Y A2 // geltono ledo prijungimas; 
#define LED_R A3 // raudono ledo prijungimas; 
#define tone_pin A0 // piezogarsiakalbio prijungimas;
#define buttonPin A4 //rezimo jungtuko prijungimas

NewPing sonar1 (TRIGGER_PIN, ECHO_PIN1, MAX_DISTANCE); //ultrasonic1 jutiklio nuskaitymo funkcija
NewPing sonar2 (TRIGGER_PIN, ECHO_PIN2, MAX_DISTANCE); //ultrasonic2 jutiklio nuskaitymo funkcija
NewPing sonar3 (TRIGGER_PIN, ECHO_PIN3, MAX_DISTANCE); //ultrasonic3 jutiklio nuskaitymo funkcija
L298N driver1(ENA, IN1, IN2); //dc driverio funkcija
L298N driver2(ENB, IN3, IN4); //dc driverio funkcija
ServoTimer2 myservo;

int sukimas = 1500; //kiek ms sukti i sona (1500ms=1.5s)
int sukimo_greitis = 150; //max 255, min 1
int normalus_greitis = 150; // max 255
int suletintas_greitis = 50; //max 255
int tone_frequency = 2000;  //Signalo daznis 50-15000 Hz
int trumpas_signalas = 10;  //Trumpo signalo trukme ms
int buttonState = 0; // migtuko inicializavimas
int max_dist = 25; 
int min_dist = 10; 

void setup()
{
  Serial.begin(9600);
  myservo.attach(10);
  pinMode(buttonPin, INPUT);
}

void loop () {
  //int dist_cm1=sonar1.ping_cm();
  //int dist_cm2=sonar2.ping_cm();
  //int dist_cm3=sonar3.ping_cm();
  //Serial.print("Atstumas1: "); Serial.print(dist_cm1); Serial.print("cm");
  //Serial.print("   Atstumas2: "); Serial.print(dist_cm2); Serial.print("cm");
  //Serial.print("   Atstumas3: "); Serial.print(dist_cm3); Serial.println("cm");

  driver2.setSpeed(sukimo_greitis);//nustatom sukimo greiti
  myservo.write(1500); //pastatyti servo 90 kampu (ziuri tiesiai) ir pasiruosti
  buttonState = digitalRead(buttonPin);//nuskaitom rezimo mygtuka

  //Servo + Utrasonic rezimas
  while (buttonState == HIGH)
  {
    //darom servo+ultra
    int dist_cm2 = servo_virsus(750);
    delay(10);
    int dist_cm1 = servo_virsus(1500);
    delay(10);
    int dist_cm3 = servo_virsus(2250);
    delay(10);
    if (dist_cm1==0)
    {dist_cm1=400;}
    if (dist_cm2==0)
    {dist_cm2=400;}
    if (dist_cm3==0)
    {dist_cm3=400;}
    distancija_rodymas(dist_cm1, dist_cm2, dist_cm3);
    pagrindine_logika(dist_cm1, dist_cm2, dist_cm3);
  }

  //3 Ultrasonic rezimas
  while (buttonState == LOW)
  {
    //darom 3 ultra
    int dist_cm2 = sonar2.ping_cm();
    delay(10);
    int dist_cm1 = sonar1.ping_cm();
    delay(10);
    int dist_cm3 = sonar3.ping_cm();
    delay(10);
    if (dist_cm1==0)
    {dist_cm1=400;}
    if (dist_cm2==0)
    {dist_cm2=400;}
    if (dist_cm3==0)
    {dist_cm3=400;}
    distancija_rodymas(dist_cm1, dist_cm2, dist_cm3);
    pagrindine_logika(dist_cm1, dist_cm2, dist_cm3);
  }


}

void auto_vairavimas(int puse)
{
  driver1.setSpeed(normalus_greitis); 
  //jei 0, tai sukam i kaire
  if (puse == 0)
  {
    driver2.forward(); //sukti i sona
    driver1.forward(); //ir vaziuoti i prieki
    delay(sukimas);
    driver2.stop(); //paleisti vairavima
  }
  //jei 1, tai sukam i desine
  else if (puse == 1)
  {
    driver2.backward(); //sukti i sona
    driver1.forward(); //ir vaziuoti i prieki
    delay(sukimas);
    driver2.stop(); //paleisti vairavima
  }
}

void led_zalia()
{
  digitalWrite (LED_G, HIGH);
  digitalWrite(LED_Y, LOW);
  digitalWrite(LED_R, LOW);
}

void led_geltona()
{
  digitalWrite (LED_G, LOW);
  digitalWrite(LED_Y, HIGH);
  digitalWrite(LED_R, LOW);
}

void led_raudona()
{
  digitalWrite (LED_G, LOW);
  digitalWrite(LED_Y, LOW);
  digitalWrite(LED_R, HIGH);
}

int servo_virsus(int kampas)
{
  //kampas -> 750 = 0, 1500 = 90, 2250 = 180
  //naudoti: int dist_cm1= servo_virsus(750);
  //Make servo go to kampas degrees
  myservo.write(kampas);
  delay(400);
  int dist_cm = sonar1.ping_cm();
  return dist_cm;
}

void trumpas_garso_signalas()
{
  NewTone(tone_pin, tone_frequency); //Groti signala tone_frequency dazniu
  delay(trumpas_signalas); //Groti signala trumpas_signalas trukme ms
  noNewTone(tone_pin); //Isjungti signala
}

void pagrindine_logika (int dist1, int dist2, int dist3)
{
  //Jei distancija visur daugiau nei 50cm, vaziuoti greitai tiesiai
  if (dist1 >= max_dist && dist2 >= max_dist && dist3 >= max_dist )
  {
    led_zalia();
    driver1.setSpeed(normalus_greitis); //turbo rezimas
    driver1.forward(); //priekyn
    delay(500); //priekyn 500ms
  }
  //Jei distancija kazkur maziau nei 50 bet daugiau nei 25, pristabdyti ir vaziuoti tiesiai
  else if ((dist1 < max_dist && dist1 >= min_dist) || (dist2 < max_dist && dist2 >= min_dist) || (dist3 < max_dist && dist3 >= min_dist))
  {
    //isijungia geltona sviesa, trumpas signalas, vaziuoja i prieki letai
    led_geltona();
    trumpas_garso_signalas();
    driver1.setSpeed(suletintas_greitis); //vezlio rezimas
    driver1.forward(); //priekyn
    delay(500); //priekyn 500ms
  }
  //Jei distancija priekije maziau nei 25, stoti
  else if (dist1 < min_dist)
  {
    //isijungia raudona sviesa, ilgas signalas, sustoti
    led_raudona();
    NewTone(tone_pin, tone_frequency); //Groti signala
    driver1.stop(); //sustoti vaziavima
    delay(2000); //palaukti 2s
    noNewTone(tone_pin); //Isjungti signala
  }
  //Jei distancija abejose sonose maziau nei 25, bet priekyje daugiau nei 25, vaziuoti greitai tiesiai
  else if (dist1 > min_dist && dist2 < min_dist && dist3 < min_dist)
  {
    //isijungia raudona sviesa, ilgas signalas, vaziuoti greitai tiesiai
    led_raudona();
    NewTone(tone_pin, tone_frequency); //Groti signala
    driver1.setSpeed(normalus_greitis); //turbo rezimas
    driver1.forward(); //priekyn
    delay(500); //priekyn 500ms
    noNewTone(tone_pin); //Isjungti signala
  }
  //Jei distancija vienam sone maziau nei 25, sukti i priesinga sona
  else if (dist2 < min_dist)
  {
    //isijungia raudona sviesa, ilgas signalas, sukti i priesinga puse nuo objekto
    led_raudona();
    NewTone(tone_pin, tone_frequency); //Groti signala
    auto_vairavimas(0);//Sukam i kaire
    noNewTone(tone_pin); //Isjungti signala
  }
  //Jei distancija vienam sone maziau nei 25, sukti i priesinga sona
  else if (dist3 < min_dist)
  {
    //isijungia raudona sviesa, ilgas signalas, sukti i priesinga puse nuo objekto
    led_raudona();
    NewTone(tone_pin, tone_frequency); //Groti signala
    auto_vairavimas(1);//Sukam i desine
    noNewTone(tone_pin); //Isjungti signala
  }
}

void distancija_rodymas (int dist1, int dist2, int dist3)
{
  Serial.print("Atstumas1: "); Serial.print(dist1); Serial.print("cm");
  Serial.print("   Atstumas2: "); Serial.print(dist2); Serial.print("cm");
  Serial.print("   Atstumas3: "); Serial.print(dist3); Serial.println("cm");
}